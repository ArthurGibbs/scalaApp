# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# landing page for the api
GET     /                               controllers.HomeController.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                   controllers.Assets.versioned(path="/public", file: Asset)

### NoDocs ###
GET     /docs                           controllers.Default.redirect(to = "/docs/swagger-ui/index.html")
### NoDocs ###
GET     /docs/swagger-ui/*file          controllers.Assets.at(path:String="/public/swagger-ui", file:String)

###
#   summary: authorize as a user
#   tags:
#       - auth
#   requestBody:
#     content:
#        application/json:
#          schema:
#            type: object
#          examples:
#            Basic:
#              value:
#                usernameOrEmail:
#                   "123"
#                password:
#                   "password"
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: DisplayUser
###
+nocsrf
POST     /api/auth/login                     controllers.AuthController.login()

###
#   summary: unauthorized
#   tags:
#       - auth
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
###
+nocsrf
GET     /api/auth/logout              controllers.AuthController.logout()
###
#   summary: finds if username is free
#   tags:
#       - registration
# parameters:
#        - in: path
#          name: username
#          schema:
#            type: string
#          required: true
#          description: the username to lookup
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: boolean
###
+nocsrf
GET     /api/registration/isUsernameUnused/:username       controllers.RegistrationController.isUsernameUnused(username: String)

###
#   summary: finds if email is unused
#   tags:
#       - registration
#   parameters:
#        - in: path
#          name: email
#          schema:
#            type: string
#          required: true
#          description: the email to lookup\
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: boolean
###
+nocsrf
GET     /api/registration/isEmailUnused/:email            controllers.RegistrationController.isEmailUnused(email: String)

###
#   summary: post a user
#   tags:
#       - registration
#   requestBody:
#     content:
#        application/json:
#          schema:
#            type: object
#          examples:
#            Basic:
#              value:
#                username:
#                   "123"
#                email:
#                   "9780987654321"
#                password:
#                   "password"
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: DisplayUser
###
+nocsrf
POST     /api/registration/register                     controllers.RegistrationController.registerUser()

###
#   summary: finds if email is unused
#   tags:
#       - registration
#   parameters:
#        - in: query
#          name: id
#          schema:
#            type: string
#          description: The number of items to skip before starting to collect the result set
#        - in: query
#          name: code
#          schema:
#            type: string
#          description: The numbers of items to return
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: DisplayUser
###
+nocsrf
GET     /api/registration/verify-email                    controllers.RegistrationController.verifyEmail(id: Int, code: String)

###
#   summary: gets a list of users
#   tags:
#       - users
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: list[DisplayUser]
###
GET     /api/users                      controllers.UserController.listUsers()

###
#   summary: gets a user by name
#   tags:
#       - users
# parameters:
#        - in: path
#          name: username
#          schema:
#            type: string
#          required: true
#          description: the username to lookup
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: option[DisplayUser]
###
GET     /api/users/byName/{username}    controllers.UserController.getUserByName(username: Option[String])


###
#   summary: test auth
#   tags:
#       - test
#   responses:
#       '200':
#         description: OK
#         content:
#            application/json:
#              schema:
#                type: string
###
GET     /api/test    controllers.SecureController.test()

